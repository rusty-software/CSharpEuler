using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.Linq;

namespace Euler
{
    [TestClass]
    public class EvenFibonacciNumbersTests
    {

        [TestMethod]
        public void FibonnacisBelow_90_ReturnsCorrectList()
        {
            var expected = new List<int> { 1, 2, 3, 5, 8, 13, 21, 34, 55, 89 };

            CollectionAssert.AreEqual(expected, FibonacciNumbers.NumbersBelow(90));
        }

        [TestMethod]
        public void SumEvensBelow_90_Returns44()
        {
            Assert.AreEqual(44, FibonacciNumbers.SumEvensBelow(90));
        }

        [TestMethod]
        public void SumEvenBelow_4000000_ReturnsCorrectNumber()
        {
            Assert.AreEqual(4613732, FibonacciNumbers.SumEvensBelow(4000000));
        }
    }

    public static class FibonacciNumbers
    {
        /// <summary>
        /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
        /// By starting with 1 and 2, the first 10 terms will be:
        /// 
        /// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        /// 
        /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
        /// find the sum of the even-valued terms.
        /// </summary>
        /// <param name="upperBound"></param>
        /// <returns></returns>
        public static int SumEvensBelow(int upperBound)
        {
            var sum = 0;

            var fibs = NumbersBelow(upperBound);
            sum = fibs.Where(f => f % 2 == 0).Sum();
            return sum;
        }

        internal static List<int> NumbersBelow(int upperBound)
        {
            var nums = new List<int> { 1 };

            while (true)
            {
                var last = nums[nums.Count - 1];
                var nextToLast = nums.Count == 1 ? nums[nums.Count - 1] : nums[nums.Count - 2];
                var num = last + nextToLast;
                if (num >= upperBound)
                {
                    break;
                }
                nums.Add(num);
            }
            return nums;
        }
    }
}
